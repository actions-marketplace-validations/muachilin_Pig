const core = require('@actions/core');
const { context, GitHub } = require("@actions/github");

function isNumber(n) { 
  return !isNaN(parseFloat(n)) && !isNaN(n - 0) 
}

async function run() {
  try {
    
    const githubToken = core.getInput('github-token')
    if (githubToken !== '') {
      
      const githubClient = new GitHub(githubToken)
      
      if (context.issue.number !== undefined) {

        const res = await githubClient.issues.get({
          owner: context.repo.owner,
          repo: context.repo.repo,
          issue_number: context.issue.number
        });

        const leftParaIndex = res.data.title.indexOf('(');
        const rightParaIndex = res.data.title.indexOf(')');
        const linkIssueStr = res.data.title.substring(leftParaIndex + 2, rightParaIndex);
        const linkIssueNumber = +linkIssueStr;

        if (!isNumber(linkIssueNumber)) {
          await githubClient.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "‚ùó Please include the number of corresponding issue in the pull request title!\n üí† For example: Pull request title (#123)\n"
          })
          return;
        }

        const labelsInRepoResponse = await githubClient.issues.listLabelsForRepo({
          owner: context.repo.owner,
          repo: context.repo.repo
        });

        const isMerged = !Github.context.payload.pull_request['merged'];
        
        if (!isMerged) {
         //catch (err) {
          //if (err.status === 404) {
            const progressLabel = labelsInRepoResponse.data.find(l => l.name === "in progress :octopus:");
            if (progressLabel === undefined) {
              await githubClient.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: "in progress :octopus:",
                description: "This issue is currently being handling",
                color: "a9ffd4"
              });
            }

            process.stdout.write(`The linked issue of this pull request is issue#${linkIssueNumber}\n`)

            const listOfCommentsResponse = await githubClient.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: linkIssueNumber
            });

            const comment = listOfCommentsResponse.data.find(l => l.body === `üí° This issue is linked to the pull request #${context.issue.number}\n üîß The related pull request is opened by @${res.data.user.login}\n\n\n üêô This comment is auto-generated by FuzzyOcto\n`);
        
            if (comment === undefined) {
              await githubClient.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: linkIssueNumber,
                body: `üí° This issue is linked to the pull request #${context.issue.number}\n üîß The related pull request is opened by @${res.data.user.login}\n\n\n üêô This comment is auto-generated by FuzzyOcto\n`,
              });
            }

            await githubClient.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: linkIssueNumber,
              labels: ["in progress :octopus:"]
            })
        } else {
          //} else {
            const issueLabelsResponse = await githubClient.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: linkIssueNumber
            });
            const issueLabel = issueLabelsResponse.data.find(l => l.name === "in progress :octopus:");
            if (issueLabel !== undefined) {
              await githubClient.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: linkIssueNumber,
                name: "in progress :octopus:"
              });
            }
    
            const finishLabel = labelsInRepoResponse.data.find(l => l.name === "done ‚ùï");
            if (finishLabel === undefined) {
              await githubClient.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: "done ‚ùï",
                description: "This issue is solved",
                color: "198c19"
              });
            }
    
            await githubClient.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: linkIssueNumber,
              labels: ["done ‚ùï"]
            })
        }
          //}
        //}
      }
    }
  } catch (error) {
    core.setFailed(error.message)
  }
}

run()